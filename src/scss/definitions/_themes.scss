/* -Color themes
-----------------------------------------------------------------------------*/
// Theme color definitions
$default-theme: 'light';
$themes: (
  light: (
    type: 'light',
    background: #fbfdff,
    background-accent: #f5f7f9,
    foreground: #223344,
    action: #2d8dd4,
    action-foreground: #fff,
  ),
  dark: (
    type: 'dark',
    background: #2d3037,
    background-accent: #292c33,
    foreground: #f0f2f4,
    action: #79b1f8,
    action-foreground: #fff,
  ),
  tan: (
    type: 'light',
    background: #efe9d3,
    background-accent: #e7dfcc,
    foreground: #4a432b,
    action: #960000,
    action-foreground: #fff,
  ),
);

/// Get a defined theme color.
///
/// @param {string} $theme - The theme name/ID.
/// @param {string} $color - The color name/ID.
/// @param {percentage} $tint-shade-amount [0%] - Amount of tint or shade to
///   apply to the color, depending on the theme.
/// @param {boolean} $tint-shade-reverse [false] - By default a tint/shade
///   value for light theme will darken the color. With $reverse true it will
///   be the opposite.
/// @return {color} The final color.
@function get-theme-color(
  $theme,
  $color,
  $tint-shade-amount: 0%,
  $tint-shade-reverse: false
) {
  $theme-data: map-get-strict($themes, $theme);
  $theme-color: map-get-strict($theme-data, $color);
  @if $tint-shade-amount != 0% {
    $theme-type: map-get-strict($theme-data, 'type');
    @if ($theme-type == 'light' and not $tint-shade-reverse) or
      ($theme-type == 'dark' and $tint-shade-reverse)
    {
      @return darken($theme-color, $tint-shade-amount);
    }
    @return lighten($theme-color, $tint-shade-amount);
  }
  @return $theme-color;
}

/// Get a plain light or dark color depending on the theme type.
///
/// @param {string} $theme - The theme name/ID.
/// @param {boolean} $reverse [false] - By default a light theme results in a
///   dark color. With $reverse true it will be the opposite.
/// @return {color} The resulting color.
@function get-theme-light-dark($theme, $reverse: false) {
  $theme-data: map-get-strict($themes, $theme);
  $theme-type: map-get-strict($theme-data, 'type');
  @if ($theme-type == 'light' and not $reverse) or
    ($theme-type == 'dark' and $reverse)
  {
    @return #222;
  }

  @return #fff;
}

/// Create a rule for every theme.
///
/// @param {string} $rule - The rule name (e.g. border-color).
/// @param {string} $color-name - Name/ID of the color to use for the rule.
/// @param {percentage} $tint-shade-amount [0%] - Amount of tint or shade to
///   apply to the color, depending on the theme.
/// @param {boolean} $tint-shade-reverse [false] - By default a tint/shade
///   value for light theme will darken the color. With $reverse true it will
///   be the opposite.
/// @param {string} $value-template ['{{color}}'] - Template for the rule value,
///   where {{color}} is replaced with the final color. Use for rules where the
///   the value contains more than just the color, e.g. '1px solid {{color}}'
///   for a border shorthand rule.
/// @param {boolean} $important [false] - Use !important.
@mixin theme-rule(
  $rule,
  $color-name,
  $tint-shade-amount: 0%,
  $tint-shade-reverse: false,
  $value-template: '{{color}}',
  $important: false
) {
  $val: unquote(
    str-replace(
      $value-template,
      '{{color}}',
      get-theme-color(
        $default-theme,
        $color-name,
        $tint-shade-amount,
        $tint-shade-reverse
      )
    )
  );
  @if $important {
    #{$rule}: $val !important;
  } @else {
    #{$rule}: $val;
  }

  @each $theme-name, $theme-data in $themes {
    @if $theme-name != $default-theme {
      $val: unquote(
        str-replace(
          $value-template,
          '{{color}}',
          get-theme-color(
            $theme-name,
            $color-name,
            $tint-shade-amount,
            $tint-shade-reverse
          )
        )
      );
      .theme-#{$theme-name} & {
        @if $important {
          #{$rule}: $val !important;
        } @else {
          #{$rule}: $val;
        }
      }
    }
  }
}

/// Create an rgba() rule for every theme.
///
/// @param {string} $rule - The rule name (e.g. border-color).
/// @param {number} $amount - Opacity between 0 and 1.
/// @param {string} $value-template ['{{color}}'] - Template for the rule value,
///   where {{color}} is replaced with the final color. Use for rules where the
///   the value contains more than just the color, e.g. '1px solid {{color}}'
///   for a border shorthand rule.
/// @param {boolean} $reverse [false] - By default a light theme results in a
///   black layer. With $reverse true it will be the opposite.
/// @param {boolean} $important [false] - Use !important.
@mixin theme-tint-shade-transparent(
  $rule,
  $amount,
  $value-template: '{{color}}',
  $reverse: false,
  $important: false
) {
  $light-rule: rgba(0, 0, 0, $amount);
  $dark-rule: rgba(255, 255, 255, $amount);
  @if $reverse {
    $light-rule: rgba(255, 255, 255, $amount);
    $dark-rule: rgba(0, 0, 0, $amount);
  }

  $val: unquote(str-replace($value-template, '{{color}}', $light-rule));
  @if $important {
    #{$rule}: $val !important;
  } @else {
    #{$rule}: $val;
  }

  @each $theme-name, $theme-data in $themes {
    @if $theme-name != $default-theme {
      $theme-type: map-get-strict($theme-data, 'type');
      .theme-#{$theme-name} & {
        @if $theme-type == 'light' {
          $val: unquote(str-replace($value-template, '{{color}}', $light-rule));
        } @else if $theme-type == 'dark' {
          $val: unquote(str-replace($value-template, '{{color}}', $dark-rule));
        }
        @if $important {
          #{$rule}: $val !important;
        } @else {
          #{$rule}: $val;
        }
      }
    }
  }
}

/// Create a plain light/dark color rule for every theme.
///
/// @param {string} $rule - The rule name (e.g. border-color).
/// @param {string} $value-template ['{{color}}'] - Template for the rule value,
///   where {{color}} is replaced with the final color. Use for rules where the
///   the value contains more than just the color, e.g. '1px solid {{color}}'
///   for a border shorthand rule.
/// @param {boolean} $reverse [false] - By default a light theme results in a
///   black layer. With $reverse true it will be the opposite.
/// @param {boolean} $important [false] - Use !important.
@mixin theme-light-dark(
  $rule,
  $value-template: '{{color}}',
  $reverse: false,
  $important: false
) {
  $val: unquote(
    str-replace(
      $value-template,
      '{{color}}',
      get-theme-light-dark($default-theme, $reverse)
    )
  );
  @if $important {
    #{$rule}: $val !important;
  } @else {
    #{$rule}: $val;
  }

  @each $theme-name, $theme-data in $themes {
    @if $theme-name != $default-theme {
      .theme-#{$theme-name} & {
        $val: unquote(
          str-replace(
            $value-template,
            '{{color}}',
            get-theme-light-dark($theme-name, $reverse)
          )
        );
        @if $important {
          #{$rule}: $val !important;
        } @else {
          #{$rule}: $val;
        }
      }
    }
  }
}

// Mixins for simple CSS rules
@mixin theme-foreground {
  @include theme-rule(color, 'foreground');
}
@mixin theme-background {
  @include theme-rule(background-color, 'background');
}
@mixin theme-background-accent {
  @include theme-rule(background-color, 'background-accent');
}
@mixin theme-action-color {
  @include theme-rule(color, 'action');
}
@mixin theme-action-foreground {
  @include theme-rule(color, 'action-foreground');
}
@mixin theme-action-background {
  @include theme-rule(background-color, 'action');
}
